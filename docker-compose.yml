services:
    postgres:
        image: postgres:17
        environment:
            POSTGRES_DB: terrier
            POSTGRES_USER: terrier
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U terrier" ]
            interval: 10s
            timeout: 5s
            retries: 5

    pgadmin:
        image: dpage/pgadmin4:latest
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@terrier.local}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
            PGADMIN_ALLOW_SPECIAL_EMAIL_DOMAINS: 'local'
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        volumes:
            - pgadmin_data:/var/lib/pgadmin
        ports:
            - "8080:80"
        depends_on:
            postgres:
                condition: service_healthy
        restart: unless-stopped

    migration:
        build:
            context: ./terrier-backend
            dockerfile: Dockerfile
        environment:
            DATABASE_URL: postgres://terrier:${POSTGRES_PASSWORD}@postgres:5432/terrier
        depends_on:
            postgres:
                condition: service_healthy
        command: [ "migration" ] # Runs all pending migrations
        profiles: [ "migration" ]

    minio:
        image: minio/minio:latest
        command: server /data --console-address ":9001"
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        ports:
            - "9000:9000" # API
            - "9001:9001" # Web Console
        volumes:
            - minio_data:/data
        healthcheck:
            test: [ "CMD", "mc", "ready", "local" ]
            interval: 5s
            timeout: 5s
            retries: 5
        restart: unless-stopped

    backend:
        build:
            context: ./terrier-backend
            dockerfile: Dockerfile
        environment:
            # Database Configuration
            DATABASE_URL: postgres://terrier:${POSTGRES_PASSWORD}@postgres:5432/terrier
            # S3/MinIO Configuration
            S3_ENDPOINT: http://minio:9000
            S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
            S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
            S3_BUCKET_NAME: ${S3_BUCKET_NAME:-terrier-files}
            S3_REGION: us-east-1
            # OIDC Configuration
            OIDC_CLIENT_ID: ${OIDC_CLIENT_ID}
            OIDC_CLIENT_SECRET: ${OIDC_CLIENT_SECRET}
            OIDC_DISCOVERY_URL: ${OIDC_DISCOVERY_URL}
            # Admin Configuration
            ADMIN_EMAILS: ${ADMIN_EMAILS}
            RUST_LOG: ${RUST_LOG:-info}
        ports:
            - "3000:3000"
        depends_on:
            postgres:
                condition: service_healthy
            minio:
                condition: service_healthy
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

    frontend:
        build:
            context: ./terrier-client
            dockerfile: Dockerfile
        environment:
            VITE_API_URL: http://localhost:3000
            NODE_ENV: production
        ports:
            - "1420:80"
        depends_on:
            backend:
                # Just get it to start, don't wait for healthcheck
                condition: service_started
        restart: unless-stopped

volumes:
    postgres_data:
    pgadmin_data:
    minio_data:
