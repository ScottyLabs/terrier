//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(table_name = "hackathons")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(unique)]
    pub slug: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub start_date: DateTime,
    pub end_date: DateTime,
    pub is_active: bool,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_hackathon_roles::Entity")]
    UserHackathonRoles,
    #[sea_orm(has_many = "super::mini_events::Entity")]
    MiniEvents,
    #[sea_orm(has_many = "super::messages::Entity")]
    Messages,
}

impl Related<super::user_hackathon_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserHackathonRoles.def()
    }
}

impl Related<super::mini_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MiniEvents.def()
    }
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Messages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
