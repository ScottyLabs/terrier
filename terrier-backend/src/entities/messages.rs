//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(table_name = "messages")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub sender_user_id: i32
    #[sea_orm(column_type = "Text")]
    pub recipient_user_ids: Vec<i32>,
    pub subject: String,
    #[sea_orm(column_type = "Text")] // Message content can be large
    pub content: String,
    pub sent_time: DateTime,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(column_type = "Integer", nullable)]
    pub parent_message_id: Option<i32>, // Reference to the parent message
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(belongs_to = "super::users::Entity", from = "Column::SenderUserId", to = "super::users::Column::Id")]
    SenderUser,
    #[sea_orm(has_many = "super::message_recipients::Entity")]
    Recipients,
    #[sea_orm(belongs_to = "super::hackathons::Entity", from = "Column::HackathonId", to = "super::hackathons::Column::Id")]
    Hackathon,
    #[sea_orm(belongs_to = "Entity", from = "Column::ParentMessageId", to = "Column::Id")]
    ParentMessage, // Self-referential relationship
    #[sea_orm(has_many = "Entity")]
    Replies, // Messages that are replies to this message
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SenderUser.def()
    }
}

impl Related<super::message_recipients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipients.def()
    }
}

impl Related<super::hackathons::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Hackathon.def()
    }
}

impl Related<Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Replies.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
