//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(table_name = "mini_events")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub start_date: DateTime,
    pub end_date: DateTime,
    pub location: Option<String>,
    pub is_active: bool,
    pub tags: Vec<String>, // New field for storing tags as a list of strings
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_event_roles::Entity")]
    UserEventRoles,
}

impl Related<super::user_event_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserEventRoles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}