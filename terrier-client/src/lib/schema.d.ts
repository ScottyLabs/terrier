/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/auth/login": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Initiate login flow */
		get: operations["login"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/logout": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Log the current user out */
		get: operations["logout"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/status": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get current user information */
		get: operations["status"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/hackathons": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new hackathon */
		post: operations["create_hackathon"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/hackathons/public": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List all active hackathons */
		get: operations["list_public_hackathons"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/hackathons/{slug}/role": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get user's role for a specific hackathon */
		get: operations["get_user_role"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		CreateHackathonRequest: {
			description?: string | null;
			/** Format: date-time */
			end_date: string;
			name: string;
			slug: string;
			/** Format: date-time */
			start_date: string;
		};
		HackathonInfo: {
			description?: string | null;
			/** Format: date-time */
			end_date: string;
			/** Format: int32 */
			id: number;
			name: string;
			slug: string;
			/** Format: date-time */
			start_date: string;
		};
		LoginQuery: {
			redirect_uri?: string | null;
		};
		UserInfo: {
			email: string;
			id: string;
			is_admin: boolean;
			name?: string | null;
			picture?: string | null;
		};
		UserRoleResponse: {
			role: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	login: {
		parameters: {
			query?: {
				/** @description URI to redirect to after login */
				redirect_uri?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Redirect to app after login */
			302: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	logout: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Redirect to logout */
			302: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	status: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User information */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserInfo"];
				};
			};
			/** @description Not authenticated */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	create_hackathon: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateHackathonRequest"];
			};
		};
		responses: {
			/** @description Hackathon created successfully */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HackathonInfo"];
				};
			};
			/** @description Invalid request or slug already exists */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Not authenticated */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Not a global admin */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	list_public_hackathons: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List of active hackathons */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HackathonInfo"][];
				};
			};
		};
	};
	get_user_role: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Hackathon slug */
				slug: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User's role in this hackathon */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserRoleResponse"];
				};
			};
			/** @description Not authenticated */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description No access to this hackathon */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Hackathon not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
